(= `() '())
(= `a 'a)
(= `,@(1 2 3) '#:ERROR:#)
(let ((x '(3 4)))
  (= `(1 2 ,@x 5)
     '(1 2 3 4 5)))
(let ((x '(3 4)))
  (= `(1 2 ((,@x)) 5)
     '(1 2 ((3 4)) 5)))
(let ((x 10) (y 20) (z 30))
  (= `(x ,y z) '(x 20 z)))
(let ((x 10) (y 20) (z 30))
  (= `(,x ,y ,z) '(10 20 30)))
(let ((x 10) (y 20) (z 30))
  (= `(x y z) '(x y z)))
(let ((x 10) (y 20) (z 30))
  (= `(x ((,y)) z) '(x ((20)) z)))
;(let ((x 10) (y 20) (z 30))
;  (= ```(x ,,,y z) '``(x ,,20 z)))

;; the following are adopted from husk scheme test suite. see
;; https://github.com/justinethier/husk-scheme/blob/master/tests/t-backquote.scm
(= `(list ,(first '(3 6)) 4)
   '(list 3 4))
(= (let ((name 'a)) `(list ,name ',name))
   '(list a (quote a)))
(= (let ((name 'a)) '(list ,name ',name))
   '(list (unquote name) (quote (unquote name))))
(= (let ((name 'a)) `(list ,name (,name)))
   '(list a (a)))
(= (let ((name 'a)) `(list ,name ((,name))))
   '(list a ((a))))
;(= `(a `(b ,(first '(3 6)) ,(foo ,(first '(3 6)) d) e) f)
;   '(a `(b ,(first '(3 6)) ,(foo 3 d) e) f))
;(= (let ((name1 'x) (name2 'y)) `(a `(b ,,name1 ,,name2 d) e))
;   '(a `(b ,x ,y d) e))
;(= (let ((name1 'x) (name2 'y)) `(a `(b ,,name1 ,',name2 d) e))
;   '(a `(b ,x ,'y d) e))
(= (backquote (list (unquote (first '(3 6))) 4))
   '(list 3 4))
(= '(backquote (list (unquote (first '(3 6))) 4))
   '`(list ,(first '(3 6)) 4))
;(= `(a `(b ,(foo ,(first '(3 6))) c) d)
;   '(a `(b ,(foo 3) c) d))
